Index: financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchBankInputFileType.java
===================================================================
--- financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchBankInputFileType.java	(revision 9978)
+++ financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchBankInputFileType.java	(revision 9979)
@@ -16,10 +16,13 @@
 package edu.arizona.kfs.pdp.batch;
 
 import java.io.BufferedReader;
+import java.io.BufferedWriter;
 import java.io.ByteArrayInputStream;
 import java.io.File;
+import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStreamReader;
+import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -31,13 +34,14 @@
 import org.kuali.kfs.sys.Message;
 import org.kuali.kfs.sys.batch.BatchInputFileTypeBase;
 import org.kuali.kfs.sys.batch.service.WrappingBatchService;
+import org.kuali.kfs.sys.businessobject.OriginationCode;
+import org.kuali.kfs.sys.dataaccess.OriginationCodeDao;
 import org.kuali.kfs.sys.exception.ParseException;
 import org.kuali.kfs.sys.service.ReportWriterService;
 import org.kuali.rice.kns.service.BusinessObjectService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.ObjectUtils;
 
-import edu.arizona.kfs.module.ld.service.FileHandler;
 import edu.arizona.kfs.sys.AZKFSConstants;
 import edu.arizona.kfs.sys.KFSKeyConstants;
 
@@ -46,9 +50,82 @@
     
     private BusinessObjectService businessObjectService;
     private DateTimeService dateTimeService;
-    private FileHandler fileHandler;
-    private ReportWriterService achReportWriterService;
+//    private ReportWriterService achReportWriterService;
+    private OriginationCodeDao originationCodeDao;
+    private String reportPath;
+    private String reportPrefix;
+    private String reportExtension;
     
+    protected class BankReportLine {
+        private String bankRoutingNumber;
+        private String bankName;
+        private String message;
+        
+        public BankReportLine() {
+            bankRoutingNumber = "";
+            bankName = "";
+            message = "";
+        }
+        
+        public BankReportLine(String bankRoutingNumber, String bankName, String message) {
+            super();
+            this.bankRoutingNumber = bankRoutingNumber;
+            this.bankName = bankName;
+            this.message = message;
+        }
+
+        /**
+         * Gets the bankRoutingNumber attribute. 
+         * @return Returns the bankRoutingNumber.
+         */
+        public String getBankRoutingNumber() {
+            return bankRoutingNumber;
+        }
+
+        /**
+         * Sets the bankRoutingNumber attribute value.
+         * @param bankRoutingNumber The bankRoutingNumber to set.
+         */
+        public void setBankRoutingNumber(String bankRoutingNumber) {
+            this.bankRoutingNumber = bankRoutingNumber;
+        }
+
+        /**
+         * Gets the bankName attribute. 
+         * @return Returns the bankName.
+         */
+        public String getBankName() {
+            return bankName;
+        }
+
+        /**
+         * Sets the bankName attribute value.
+         * @param bankName The bankName to set.
+         */
+        public void setBankName(String bankName) {
+            this.bankName = bankName;
+        }
+
+        /**
+         * Gets the message attribute. 
+         * @return Returns the message.
+         */
+        public String getMessage() {
+            return message;
+        }
+
+        /**
+         * Sets the message attribute value.
+         * @param message The message to set.
+         */
+        public void setMessage(String message) {
+            this.message = message;
+        }
+        
+        
+    }
+
+    
     /**
      * No additional information is added to ACH Banking batch files.
      * 
@@ -91,45 +168,39 @@
     public Object parse(byte[] fileByteContent) throws ParseException {
         List<ACHBank> bankList = new ArrayList<ACHBank>();
 //        ((WrappingBatchService) achReportWriterService).initialize();
-//        fileHandler.setUpOutputErrorFile();
-        List<Message> auditReportMessages;
+
+        List<BankReportLine> reportLines = new ArrayList<BankReportLine>();
         String systemSource = "";
         ACHBank currentBank;
         ACHBank existingBank;
-        ACHBank validBank;
+        BankReportLine reportLine;
         Boolean saveBank = true;
         BufferedReader bufferedFileReader = new BufferedReader(new InputStreamReader(new ByteArrayInputStream(fileByteContent)));
         String fileLine;
         
         try {
-            // need to get system source, use do/while to get it?
-            // or get systemSource from a fileLine when it finds it; only one system source when this method is called
-//          achReportWriterService.writeSubTitle("System Source: " + systemSource);
-            
             while ((fileLine = bufferedFileReader.readLine()) != null) {
                 LOG.info("Bank line: " + fileLine);
                 
                 // get a valid systemSource from the file
                 if (systemSource == null || systemSource.equals("")) {
-                    systemSource = fileLine.substring(150, 151).trim();
+                    systemSource = fileLine.substring(150, 152).trim();
                 }
                 
-                auditReportMessages = new ArrayList<Message>();
                 currentBank = new ACHBank(fileLine);
                 existingBank = getAchBank(currentBank.getBankRoutingNumber());                
                 if (ObjectUtils.isNull(existingBank)) {  // then we insert a new bank
-                    saveBank = validateBank(currentBank, auditReportMessages);
+                    saveBank = validateBank(currentBank, reportLines);
                     if (saveBank) {
-                        validBank = new ACHBank();
-                        validBank.setBankRoutingNumber(currentBank.getBankRoutingNumber());
-                        validBank.setBankName(currentBank.getBankName());
-                        auditReportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_LOADED_SUCCESSFULLY, Message.TYPE_WARNING));
-//                        achReportWriterService.writeError(validBank, auditReportMessages);
+                        reportLine = new BankReportLine(currentBank.getBankRoutingNumber(), currentBank.getBankName(), AZKFSConstants.ACHFileConstants.ACH_BANK_LOADED_SUCCESSFULLY);
+                        reportLines.add(reportLine);
                         bankList.add(currentBank);
                     }
                 }
-
             }
+            
+            // write audit report
+            writeReport(reportLines, systemSource);
         }
         catch (IOException e) {
             LOG.error("Error encountered reading from file content", e);
@@ -161,7 +232,7 @@
      * @param bank
      * @return
      */
-    private Boolean validateBank(ACHBank bank, List<Message> reportMessages) {
+    protected Boolean validateBank(ACHBank bank, List<BankReportLine> reportMessages) {
         String bankRoutingNbr = bank.getBankRoutingNumber();
         String bankOfficeCd = bank.getBankOfficeCode();
         String bankTypeCd = bank.getBankTypeCode();
@@ -183,91 +254,165 @@
         validTypeCodes.add("0");
         validTypeCodes.add("1");
         validTypeCodes.add("2");
-        ACHBank errorBank = new ACHBank();
-        errorBank.setBankRoutingNumber(bankRoutingNbr);
-        errorBank.setBankName(bankNm);
-                
-        // check office code
-        if (bankOfficeCd == null || !validOfficeCodes.contains(bankOfficeCd)) {
-            bank.setBankOfficeCode("O");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_OFFICE_CD_ERROR, Message.TYPE_WARNING));
- //           achReportWriterService.writeError(errorBank, reportMessages);
+        
+        // check customer name, return false if not present
+        if (bankNm == null || bankNm.equals("")) {
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_MISSING_NM_ERROR));
+            return false; 
         }
         
+        // check address, return false if not present
+        if (bankAddr == null || bankAddr.equals("") || bankCity == null || bankCity.equals("") || bankSt == null || bankSt.equals("")
+             || bankZipCd == null || bankZipCd.equals("")) {
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_ADDR_ERROR));
+            return false;            
+        }
+        
         // check record type code
         if (bankTypeCd == null || bankTypeCd.equals("")) {    // if no record type code
             bank.setBankTypeCode("0");
         }
         else if (!validTypeCodes.contains(bankTypeCd)) {    // if an invalid code
             bank.setBankTypeCode("0");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_TYP_CD_ERROR, Message.TYPE_WARNING));
- //           achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_TYP_CD_ERROR));
         }
         else if (bankTypeCd.equals("2") && (bankNewRoutingNbr == null || bankNewRoutingNbr.equals(""))) {    // if no new routing number
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_TYP_CD_ROUTING_NBR_ERROR, Message.TYPE_WARNING));
-   //         achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_TYP_CD_ROUTING_NBR_ERROR));
             return false;
         }
         
+        // check office code
+        if (bankOfficeCd == null || !validOfficeCodes.contains(bankOfficeCd)) {
+            bank.setBankOfficeCode("O");
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_OFFICE_CD_ERROR));
+        }
+                
         // check new routing number
         if (bankNewRoutingNbr == null || bankNewRoutingNbr.equals("")) {
             bank.setBankNewRoutingNumber("000000000");
         }
-        
-        // check customer name, return false if not present
-        if (bankNm == null || bankNm.equals("")) {
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_MISSING_NM_ERROR, Message.TYPE_WARNING));
- //         achReportWriterService.writeError(errorBank, reportMessages);
-            return false; 
-        }
-        
-        // check address, return false if not present
-        if (bankAddr == null || bankAddr.equals("") || bankCity == null || bankCity.equals("") || bankSt == null || bankSt.equals("")
-             || bankZipCd == null || bankZipCd.equals("")) {
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_ADDR_ERROR, Message.TYPE_WARNING));
- //         achReportWriterService.writeError(errorBank, reportMessages);
-            return false;            
-        }
-                
+                        
         // check area code
         if (bankPhoneAreaCd == null || bankPhoneAreaCd.equals("")) {
             bank.setBankPhoneAreaCode("000");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR, Message.TYPE_WARNING));
-            // achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR));
         }
         
         // check phone number prefix
         if (bankPhonePrefixNbr == null || bankPhonePrefixNbr.equals("")) {
             bank.setBankPhonePrefixNumber("000");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR, Message.TYPE_WARNING));
-            // achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR));
         }
         
         // check phone number suffix
         if (bankPhoneSuffixNbr == null || bankPhoneSuffixNbr.equals("")) {
             bank.setBankPhoneSuffixNumber("0000");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR, Message.TYPE_WARNING));
-            // achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INCOMPLETE_PHONE_ERROR));
         }
         
         // check institution status code
         if (bankInstitutionStatusCd == null || bankInstitutionStatusCd.equals("")) {
             bank.setBankInstitutionStatusCode("1");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_INST_STAT_CD, Message.TYPE_WARNING));
-            // achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_INST_STAT_CD));
         }
         
         // check data view code
         if (bankDataViewCd == null || bankDataViewCd.equals("")) {
             bank.setBankDataViewCode("1");
-            reportMessages.add(new Message(AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_DATA_VIEW_CD, Message.TYPE_WARNING));
-            // achReportWriterService.writeError(errorBank, reportMessages);
+            reportMessages.add(new BankReportLine(bankRoutingNbr, bankNm, AZKFSConstants.ACHFileConstants.ACH_BANK_INVALID_DATA_VIEW_CD));
         }
         
         return true;
     }
 
     /**
+     * This method iterates through the lines generated during file processing and prints them to a file.
+     * Each line is 100 characters long. Routing number is 9, bank name is 36, and the message is 45.
+     * 
+     * @param lines
+     */
+    protected void writeReport(List<BankReportLine> lines, String systemSource) {
+        File reportFile = new File(reportPath + reportPrefix + "_" + dateTimeService.toDateTimeStringForFilename(dateTimeService.getCurrentDate()) + "." + reportExtension);
+        BufferedWriter writer;
+        String routingNbr;
+        String bankNm;
+        
+        try {
+            writer = new BufferedWriter(new PrintWriter(reportFile));
+            writeReportTitle(writer, systemSource);
+            writeReportHeadings(writer);
+            for (BankReportLine line: lines) {
+                routingNbr = rightPad(line.getBankRoutingNumber(), 15, " ");
+                bankNm = rightPad(line.getBankName(), 40, " ");
+                writer.write(routingNbr + bankNm + line.getMessage());
+            }
+        }
+        catch (FileNotFoundException e) {
+            LOG.error(reportFile + " not found " + " " + e.getMessage());
+            throw new RuntimeException(reportFile + " not found " + e.getMessage(), e);
+        }
+        catch (IOException e) {
+            LOG.error("Error writing to BufferedWriter " + e.getMessage());
+            throw new RuntimeException("Error writing to BufferedWriter " + e.getMessage(), e);
+        }
+    }
+
+    /**
+     * This method writes the report title.
+     * 
+     * @param systemSource
+     */
+    protected void writeReportTitle(BufferedWriter writer, String systemSource) {
+         OriginationCode originCd = originationCodeDao.findByCode(systemSource);
+         String source = originCd.getFinancialSystemDatabaseDesc();
+        
+        try {
+            writer.write("ACH Bank Interface");
+            writer.write("System Source: " + systemSource + " - " + source);
+        }
+        catch (IOException e) {
+            LOG.error("Error writing to BufferedWriter " + e.getMessage());
+            throw new RuntimeException("Error writing to BufferedWriter " + e.getMessage(), e);
+        }
+    }
+
+    /**
+     * This method writes the headings for the ACH bank audit report columns.
+     * 
+     * @param writer
+     */
+    protected void writeReportHeadings(BufferedWriter writer) {
+        String bankRoutingHdr = rightPad("Bank Routing #", 15, " ");
+        String bankNmHdr = rightPad("Bank Name", 40, " ");
+        
+        try {
+            writer.write(bankRoutingHdr + bankNmHdr + "Message");
+        }
+        catch (IOException e) {
+            LOG.error("Error writing to BufferedWriter " + e.getMessage());
+            throw new RuntimeException("Error writing to BufferedWriter " + e.getMessage(), e);
+        }
+    }
+  
+    /**
+     * This method adds white space to the valToPad string.
+     * 
+     * @param valToPad
+     * @param sizeToPadTo
+     * @param padChar
+     * @return valToPad + white space
+     */
+    protected String rightPad(String valToPad, int sizeToPadTo, String padChar) {
+        if (StringUtils.isBlank(valToPad)) {
+            return StringUtils.repeat(padChar, sizeToPadTo);
+        }
+        if (valToPad.length() >= sizeToPadTo) {
+            return valToPad;
+        }
+        return valToPad + StringUtils.repeat(padChar, sizeToPadTo - valToPad.length());
+    }
+    
+    /**
      * @see org.kuali.kfs.sys.batch.BatchInputFileType#process(java.lang.String, java.lang.Object)
      */
     public void process(String fileName, Object parsedFileContents) {
@@ -319,7 +464,39 @@
      * Sets the achReportWriterService attribute value.
      * @param achReportWriterService The achReportWriterService to set.
      */
-    public void setAchReportWriterService(ReportWriterService achReportWriterService) {
+/**    public void setAchReportWriterService(ReportWriterService achReportWriterService) {
         this.achReportWriterService = achReportWriterService;
-    }    
+    } */
+
+    /**
+     * Sets the originCodeDao attribute value.
+     * @param originCodeDao The originCodeDao to set.
+     */
+    public void setOriginationCodeDao(OriginationCodeDao originationCodeDao) {
+        this.originationCodeDao = originationCodeDao;
+    }
+    
+    /**
+     * Sets the reportPath attribute value.
+     * @param reportPath The reportPath to set.
+     */
+    public void setReportPath(String reportPath) {
+        this.reportPath = reportPath;
+    }
+
+    /**
+     * Sets the reportExtension attribute value.
+     * @param reportExtension The reportExtension to set.
+     */
+    public void setReportExtension(String reportExtension) {
+        this.reportExtension = reportExtension;
+    }
+
+    /**
+     * Sets the fileReportPrefix attribute value.
+     * @param fileReportPrefix The fileReportPrefix to set.
+     */
+    public void setReportPrefix(String reportPrefix) {
+        this.reportPrefix = reportPrefix;
+    }
 }
