Index: financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchPayeeBankAcctInputFileType.java
===================================================================
--- financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchPayeeBankAcctInputFileType.java	(revision 10970)
+++ financial-system/kfs/branches/mod-hlo/work/src/edu/arizona/kfs/pdp/batch/AchPayeeBankAcctInputFileType.java	(revision 10971)
@@ -30,20 +30,22 @@
 
 import org.apache.commons.lang.StringUtils;
 import org.apache.log4j.Logger;
+import org.kuali.kfs.pdp.PdpConstants;
+import org.kuali.kfs.pdp.PdpPropertyConstants;
 import org.kuali.kfs.pdp.businessobject.ACHBank;
 import org.kuali.kfs.pdp.businessobject.PayeeACHAccount;
-import org.kuali.kfs.sys.Message;
+import org.kuali.kfs.sys.KFSPropertyConstants;
 import org.kuali.kfs.sys.batch.BatchInputFileTypeBase;
 import org.kuali.kfs.sys.businessobject.OriginationCode;
 import org.kuali.kfs.sys.dataaccess.OriginationCodeDao;
 import org.kuali.kfs.sys.exception.ParseException;
-import org.kuali.kfs.sys.service.ReportWriterService;
+import org.kuali.rice.kim.bo.Person;
+import org.kuali.rice.kim.service.KIMServiceLocator;
+import org.kuali.rice.kim.util.KIMPropertyConstants;
 import org.kuali.rice.kns.service.BusinessObjectService;
 import org.kuali.rice.kns.service.DateTimeService;
 import org.kuali.rice.kns.util.ObjectUtils;
 
-import edu.arizona.kfs.module.ld.service.FileHandler;
-import edu.arizona.kfs.pdp.batch.AchBankInputFileType.BankReportLine;
 import edu.arizona.kfs.pdp.util.PayeeACHAcctFlatFileConverter;
 import edu.arizona.kfs.sys.AZKFSConstants;
 import edu.arizona.kfs.sys.KFSKeyConstants;
@@ -158,11 +160,20 @@
      * 2. If there is no payee ID number supplied, reject record. 
      * 3. Payee Email Address should be required as the email addresses will be used by the ACH Advice
      *  Notification Job (pdpSendAchAdviceNotificationsJob). Reject record if no email address is supplied.
-     * 4. If the Payee ACH Account exists for the employee or student in the Payee ACH Account table
+     * 4. If the bank account number is missing, reject record.
+     * 5. If the payee ID type is invalid (i.e. is not employee or entity), reject record.
+     * 6. If payee is a member of the ACH override group (defined in the BANKING_INFORMATION_OVERRIDE_GROUP parm
+     *  don't do anything except write message to audit report. 
+     * 7. If the Payee ACH Account exists for the employee or student in the Payee ACH Account table
      *  compare the remainder of the provided file account information and update the row accordingly, 
      *  including the active indicator.
-     * 5. If the Payee ACH Account does not exist in the Payee ACH Account table for the
+     * 7a. Ignore payee name when doing this comparison and update.
+     * 7b. If no payee match is found (derived from payee id type and payee id number using Person service),
+     *  reject record.
+     * 8. If the Payee ACH Account does not exist in the Payee ACH Account table for the
      *  associated payee, insert a row with the information in XML.
+     * 8a. If no payee name is provided, reject record.
+     * 8b. If no payee match is found (derived from payee id type and payee id number), reject record.
      *  
      * It also saves new or updated records into PDP_PAYEE_ACH_ACCT_T and saves reporting information,
      *  if applicable.
@@ -201,7 +212,18 @@
         return payeeAccountList;
     }
     
+    /**
+     * This method does some existence checks to see if the payee should be rejected. It also calls helper
+     * methods to determine if it requires a new or modified record, and validates the data in the record.
+     * 
+     * @param currentPayeeAcct
+     * @param reportLines
+     * @param payeeAccountList
+     */
     protected void processPayeeAcct(PayeeACHAccount currentPayeeAcct, List<PayeeReportLine> reportLines, List<PayeeACHAccount> payeeAccountList) {
+        List<String> validPayeeIDTypeCodes = new ArrayList<String>();
+        validPayeeIDTypeCodes.add(PdpConstants.PayeeIdTypeCodes.ENTITY);
+        validPayeeIDTypeCodes.add(PdpConstants.PayeeIdTypeCodes.EMPLOYEE);        
         PayeeReportLine reportLine = new PayeeReportLine();
         PayeeACHAccount existingPayeeAcct;
         Boolean validChanges = false;
@@ -219,6 +241,17 @@
             reportLine = new PayeeReportLine(currentPayeeAcct.getPayeeIdNumber(), currentPayeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_MISSING_EMAIL);
             reportLines.add(reportLine);
         }
+        else if (StringUtils.isBlank(currentPayeeAcct.getBankAccountNumber())) {
+            reportLine = new PayeeReportLine(currentPayeeAcct.getPayeeIdNumber(), currentPayeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_MISSING_ACCT_NBR_ERROR);
+            reportLines.add(reportLine);
+        }        
+        else if (StringUtils.isBlank(currentPayeeAcct.getPayeeIdentifierTypeCode()) || !validPayeeIDTypeCodes.contains(currentPayeeAcct.getPayeeIdentifierTypeCode())) {
+            reportLine = new PayeeReportLine(currentPayeeAcct.getPayeeIdNumber(), currentPayeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_INVALID_PAYEE_ID_TYP_ERROR);
+            reportLines.add(reportLine);
+        }
+/*        else if () {
+            // check to see if payee is in override group
+        } */
         else {
             existingPayeeAcct = getPayeeACHAccount(currentPayeeAcct.getPayeeIdNumber(), currentPayeeAcct.getPayeeIdentifierTypeCode());
             if (ObjectUtils.isNull(existingPayeeAcct)) {    // then currentPayeeAcct is new
@@ -272,7 +305,7 @@
      */
     private boolean existingRoutingNumber(String routingNumber) {
         Map<String, String> pkMap = new HashMap<String, String>();
-        pkMap.put("bankRoutingNumber", routingNumber);
+        pkMap.put(PdpPropertyConstants.BANK_ROUTING_NUMBER, routingNumber);
         ACHBank bank = (ACHBank) businessObjectService.findByPrimaryKey(ACHBank.class, pkMap);
         if (ObjectUtils.isNull(bank)) {
             return false;
@@ -286,17 +319,39 @@
      *  
      * @return Returns the matching PayeeACHAccount object, null if payeeIdNbr and/or payeeIdType is invalid.
      */
-    private PayeeACHAccount getPayeeACHAccount(String payeeIdNbr, String payeeIdType) {
-                
+    private PayeeACHAccount getPayeeACHAccount(String payeeIdNbr, String payeeIdType) {                
         Map<String, String> pkMap = new HashMap<String, String>();
-        pkMap.put("payeeIdNumber", payeeIdNbr);
-        pkMap.put("payeeIdentifierTypeCode", payeeIdType);
+        pkMap.put(PdpPropertyConstants.PAYEE_ID_NUMBER, payeeIdNbr);
+        pkMap.put(PdpPropertyConstants.PAYEE_IDENTIFIER_TYPE_CODE, payeeIdType);
         PayeeACHAccount payeeACHAccount = (PayeeACHAccount) businessObjectService.findByPrimaryKey(PayeeACHAccount.class, pkMap);
         
         return payeeACHAccount;
     }
     
     /**
+     * Uses the Person service to find a matching payee as a Person.
+     * 
+     * @param payeeIdNbr
+     * @param payeeIdType
+     * @return a matching Person if one exists; null otherwise
+     */
+    private Person getPersonFromPayeeInfo(String payeeIdNbr, String payeeIdType) {
+        Map<String, String> fieldsForLookup = new HashMap<String, String>();
+        
+        if (payeeIdType.equals(KIMPropertyConstants.Person.EMPLOYEE_ID)) {
+            fieldsForLookup.put(KIMPropertyConstants.Person.AFFILIATION_TYPE_CODE, payeeIdType);
+            fieldsForLookup.put(KIMPropertyConstants.Person.EMPLOYEE_ID, payeeIdNbr);         
+        }
+        else {    // payee is an entity
+            fieldsForLookup.put(KIMPropertyConstants.Person.AFFILIATION_TYPE_CODE, payeeIdType);
+            fieldsForLookup.put(KIMPropertyConstants.Person.ENTITY_ID, payeeIdNbr);            
+        }
+                
+        List<? extends Person> persons = KIMServiceLocator.getPersonService().findPeople(fieldsForLookup);
+        return persons.get(0);
+    }
+    
+    /**
      * This method compares the potentially new currentPayeeAcct to the existingPayeeAcct:
      * If existingPayeeAcct has a different field value from currentPayeeAcct, update existingPayeeAcct.   
      *  
@@ -306,6 +361,7 @@
      */
     protected boolean comparePayeeAccts(PayeeACHAccount currentPayeeAcct, PayeeACHAccount existingPayeeAcct,
             List<PayeeReportLine> reportLines) {
+        PayeeReportLine reportLine;
         boolean validAcct = true;
         boolean changesMade = false;
         List<String> validPayeeIDTypeCodes = new ArrayList<String>();        
@@ -323,16 +379,16 @@
         String oldAchTransactionType;
         String newAchTransactionType;                
         String oldBankAccountTypeCode;
-        String newBankAccountTypeCode;        
+        String newBankAccountTypeCode;
         
         // check for valid changes in currentPayeeAcct
         validAcct = validatePayeeAcct(currentPayeeAcct, reportLines);
         
         // set up values for variables
-        validPayeeIDTypeCodes.add("T");
-        validPayeeIDTypeCodes.add("E");
-        validAcctTypeCodes.add("22");
-        validAcctTypeCodes.add("32");
+        validPayeeIDTypeCodes.add(PdpConstants.PayeeIdTypeCodes.ENTITY);
+        validPayeeIDTypeCodes.add(PdpConstants.PayeeIdTypeCodes.EMPLOYEE);
+        validAcctTypeCodes.add(AZKFSConstants.ACHAcctTypeCodes.CHECKING);
+        validAcctTypeCodes.add(AZKFSConstants.ACHAcctTypeCodes.SAVINGS);
         oldBankRoutingNumber = existingPayeeAcct.getBankRoutingNumber();
         newBankRoutingNumber = currentPayeeAcct.getBankRoutingNumber();
         oldBankAccountNumber = existingPayeeAcct.getBankAccountNumber();
@@ -348,6 +404,13 @@
         oldBankAccountTypeCode = existingPayeeAcct.getBankAccountTypeCode();
         newBankAccountTypeCode = currentPayeeAcct.getBankAccountTypeCode();        
         
+        // Check to see if the "new" payee is a valid Person; if no match, don't update
+        Person payee = getPersonFromPayeeInfo(currentPayeeAcct.getPayeeIdNumber(), newPayeeIdTypeCode);
+        if (payee == null) {
+            reportLine = new PayeeReportLine(currentPayeeAcct.getPayeeIdNumber(), newPayeeName, AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_INVALID_EXISTING_MATCH);
+            reportLines.add(reportLine);
+            validAcct = false;
+        }
         
         if (validAcct) {    // update existingPayeeAcct appropriately
             // check routing number
@@ -362,12 +425,6 @@
                 changesMade = true;
             }
             
-            // check payee name
-            if (StringUtils.isNotBlank(newPayeeName) && !newPayeeName.equals(oldPayeeName)) {
-                existingPayeeAcct.setPayeeName(newPayeeName);
-                changesMade = true;
-            }
-            
             // check payee email address
             if (StringUtils.isNotBlank(newPayeeEmailAddr) && !newPayeeEmailAddr.equals(oldPayeeEmailAddr)) {
                 existingPayeeAcct.setPayeeEmailAddress(newPayeeEmailAddr);
@@ -408,14 +465,10 @@
     protected boolean validatePayeeAcct(PayeeACHAccount payeeAcct, List<PayeeReportLine> reportLines) {
         PayeeReportLine reportLine;
         boolean validAcct = true;
-        List<String> validPayeeIDTypeCodes = new ArrayList<String>();
-        validPayeeIDTypeCodes.add("T");
-        validPayeeIDTypeCodes.add("E");
         List<String> validAcctTypeCodes = new ArrayList<String>();
-        validAcctTypeCodes.add("22");
-        validAcctTypeCodes.add("32");
+        validAcctTypeCodes.add(AZKFSConstants.ACHAcctTypeCodes.CHECKING);
+        validAcctTypeCodes.add(AZKFSConstants.ACHAcctTypeCodes.SAVINGS);
         String bankRoutingNumber = payeeAcct.getBankRoutingNumber();
-        String bankAcctNumber = payeeAcct.getBankAccountNumber();
         String payeeName = payeeAcct.getPayeeName();
         String payeeEmailAddr = payeeAcct.getPayeeEmailAddress();
         String payeeIdTypeCode = payeeAcct.getPayeeIdentifierTypeCode();
@@ -428,24 +481,16 @@
             reportLines.add(reportLine);
         }
         
-        // check bank account number
-        if (StringUtils.isBlank(bankAcctNumber)) {
-            reportLine = new PayeeReportLine(payeeAcct.getPayeeIdNumber(), payeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_MISSING_ACCT_NBR_ERROR);
-            reportLines.add(reportLine);
-        }
-        
         // check payee name
         if (StringUtils.isBlank(payeeName)) {
             reportLine = new PayeeReportLine(payeeAcct.getPayeeIdNumber(), payeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_MISSING_PAYEE_NM_ERROR);
             reportLines.add(reportLine);
+            validAcct = false;
         }
-                
-        // check payee id type code
-        if (StringUtils.isBlank(payeeIdTypeCode) || !validPayeeIDTypeCodes.contains(payeeIdTypeCode)) {
-            reportLine = new PayeeReportLine(payeeAcct.getPayeeIdNumber(), payeeAcct.getPayeeName(), AZKFSConstants.ACHFileConstants.ACH_PAYEE_ACCT_INVALID_PAYEE_ID_TYP_ERROR);
-            reportLines.add(reportLine);
-        }
+
+        // use Person service to derive payee name; return false if no match
         
+        
         // check ACH transaction type
         if (StringUtils.isBlank(achTransactionType)) {
             payeeAcct.setAchTransactionType("ACH");
